<?php

namespace App\Http\Controllers;

use App\Models\Roll;
use App\Services\TelegramService;
use Illuminate\Http\Request;

class RollController extends Controller
{
    public function index(Request $request)
    {

        $start_date = $request->start_date ?? date('Y-m-01');
        $end_date = $request->end_date ?? date('Y-m-d');
        $sale = $request->sale ?? '';

        if ($sale == 'yes') {
            $rolls = Roll::orderBy('created_at', 'desc')->whereBetween('created_at', [$start_date . ' 00:00:00', $end_date . ' 23:59:59'])->has('sale')->get();
        } elseif ($sale == 'no') {
            $rolls = Roll::orderBy('created_at', 'desc')->whereBetween('created_at', [$start_date . ' 00:00:00', $end_date . ' 23:59:59'])->has('sale', 0)->get();
        } else{
            $rolls = Roll::orderBy('created_at', 'desc')->whereBetween('created_at', [$start_date . ' 00:00:00', $end_date . ' 23:59:59'])->get();
        }

        return view('pages.rolls.index', compact('rolls', 'start_date', 'end_date', 'sale'));
    }

    public function create()
    {
        return view('pages.rolls.create');
    }

    public function store(Request $request)
    {

        $request->validate([
            'size' => 'required|numeric',
            'weight' => 'required|numeric',
            'paper_weight' => 'required|numeric',
            'glue' => 'required|boolean',
        ]);

        Roll::create([
            'user_id'=> auth()->user()->id,
            'size'=> $request->size,
            'weight'=> $request->weight,
            'paper_weight'=> $request->paper_weight,
            'glue'=> $request->glue,
        ]);

        // üõ†–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
        // üì¶–¢–æ–≤–∞—Ä—ã: –†—É–ª–æ–Ω
        // üìê–§–æ—Ä–º–∞—Ç: 104 —Å–º
        // üìè–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: 130 –≥—Ä
        // üîé–í–µ—Å: 560 –∫–≥
        // ‚ôªÔ∏è–ö–ª–µ–π: –î–∞
        // üìÖ –î–∞—Ç–∞: 9 —Ñ–µ–≤ 2024 15:07
        // üë®‚Äçüíª –ú–µ—Ö–∞–Ω–∏–∫: –ö–æ–¥–∏—Ä–∂–æ–Ω –ù—É—Ä–º–∞—Ç–æ–≤

        $text = "üõ†–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ\n";
        $text .= "üì¶–¢–æ–≤–∞—Ä—ã: –†—É–ª–æ–Ω\n";
        $text .= "üìê–§–æ—Ä–º–∞—Ç: " . $request->size . " —Å–º\n";
        $text .= "üìè–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: " . $request->paper_weight . " –≥—Ä\n";
        $text .= "üîé–í–µ—Å: " . $request->weight . " –∫–≥\n";
        $text .= "‚ôªÔ∏è–ö–ª–µ–π: " . ($request->glue ? '–î–∞' : '–ù–µ—Ç') . "\n";
        $text .= "üìÖ –î–∞—Ç–∞: " . now()->format('j M Y H:i') . "\n";
        $text .= "üë®‚Äçüíª –ú–µ—Ö–∞–Ω–∏–∫: " . auth()->user()->fullname . "\n";

        TelegramService::sendChannel($text);

        flash('–†—É–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω', 'success');

        return redirect()->back();

    }

    public function show(Roll $roll)
    {
        return view('pages.rolls.show', compact('roll'));
    }

    public function edit(Roll $roll)
    {
        if ($roll->sale) {
            return back()->with('error','–†—É–ª–æ–Ω –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –ø—Ä–æ–¥–∞–∂–µ');
        }
        return view('pages.rolls.edit', compact('roll'));
    }

    public function update(Request $request, Roll $roll)
    {
        $request->validate([
            'size' => 'required|numeric',
            'weight' => 'required|numeric',
            'paper_weight' => 'required|numeric',
            'glue' => 'required|boolean',
        ]);

        return redirect()->route('rolls.index')->with('success','–†—É–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
    }

    public function destroy(Roll $roll)
    {
        if (time() - strtotime($roll->created_at) < 86400) {
            return redirect()->route('rolls.index')->with('error','–†—É–ª–æ–Ω –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è');
        }

        if ($roll->sale) {
            return back()->with('error','–†—É–ª–æ–Ω –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –ø—Ä–æ–¥–∞–∂–µ');
        }

        $roll->delete();
        return redirect()->route('rolls.index')->with('success','–†—É–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
    }
}
